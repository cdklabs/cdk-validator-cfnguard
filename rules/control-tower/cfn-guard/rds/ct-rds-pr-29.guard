# ###################################
##       Rule Specification        ##
#####################################
# 
# Rule Identifier:
#   rds_cluster_public_access_check
# 
# Description:
#   This control checks whether an Amazon RDS database cluster is configured to be publicly accessible, or not, as determined by the setting of the PubliclyAccessible property.
# 
# Reports on:
#   AWS::RDS::DBCluster
# 
# Evaluates:
#   AWS CloudFormation, AWS CloudFormation hook
# 
# Rule Parameters:
#   None
# 
# Scenarios:
#   Scenario: 1
#     Given: The input document is an AWS CloudFormation or CloudFormation hook document
#       And: The input document does not contain any RDS DB cluster resources
#       Then: SKIP
#   Scenario: 2
#     Given: The input document is an AWS CloudFormation or CloudFormation hook document
#       And: The input document contains an RDS DB cluster resource
#       And: 'Engine' has been provided and set to a database engine type other than a
#            Multi-AZ database engine (type other than 'mysql' or 'postgres')
#      Then: SKIP
#   Scenario: 3
#     Given: The input document is an AWS CloudFormation or CloudFormation hook document
#       And: The input document contains an RDS DB cluster resource
#       And: 'Engine' has been provided and set to a Multi-AZ database engine
#            ('mysql', 'postgres')
#       And: 'PubliclyAccessible' has not been provided
#      Then: FAIL
#   Scenario: 4
#     Given: The input document is an AWS CloudFormation or CloudFormation hook document
#       And: The input document contains an RDS DB cluster resource
#       And: 'Engine' has been provided and set to a Multi-AZ database engine
#            ('mysql', 'postgres')
#       And: 'PubliclyAccessible' has been provided and set to a value other than bool(false)
#      Then: FAIL
#   Scenario: 5
#     Given: The input document is an AWS CloudFormation or CloudFormation hook document
#       And: The input document contains an RDS DB cluster resource
#       And: 'Engine' has been provided and set to a Multi-AZ database engine
#            ('mysql', 'postgres')
#       And: 'PubliclyAccessible' has been provided and set to bool(false)
#      Then: PASS

#
# Constants
#
let INPUT_DOCUMENT = this
let RDS_DB_CLUSTER_TYPE = "AWS::RDS::DBCluster"
let MULTI_AZ_ENGINE_TYPES = [ "mysql", "postgres" ]

#
# Assignments
#
let rds_db_clusters = Resources.*[ Type == %RDS_DB_CLUSTER_TYPE ]

#
# Primary Rules
#
rule rds_cluster_public_access_check when is_cfn_template(%INPUT_DOCUMENT)
                                          %rds_db_clusters not empty {
    check(%rds_db_clusters.Properties)
        <<
        [CT.RDS.PR.29]: Require an Amazon RDS cluster not be configured to be publicly accessible by means of the 'PubliclyAccessible' property
        [FIX]: Set the value of the PubliclyAccessible property to false.
        >>
}

rule rds_cluster_public_access_check when is_cfn_hook(%INPUT_DOCUMENT, %RDS_DB_CLUSTER_TYPE) {
    check(%INPUT_DOCUMENT.%RDS_DB_CLUSTER_TYPE.resourceProperties)
        <<
        [CT.RDS.PR.29]: Require an Amazon RDS cluster not be configured to be publicly accessible by means of the 'PubliclyAccessible' property
        [FIX]: Set the value of the PubliclyAccessible property to false.
        >>
}

#
# Parameterized Rules
#
rule check(rds_db_cluster) {
    %rds_db_cluster[
        filter_multi_az_engine(this)
    ] {
        # Scenario 2
        PubliclyAccessible exists

        # Scenarios 3 and 4
        PubliclyAccessible == false
    }
}

rule filter_multi_az_engine(rds_db_cluster) {
    %rds_db_cluster {
        Engine exists
        Engine in %MULTI_AZ_ENGINE_TYPES
    }
}


#
# Utility Rules
#
rule is_cfn_template(doc) {
    %doc {
        AWSTemplateFormatVersion exists  or
        Resources exists
    }
}

rule is_cfn_hook(doc, RESOURCE_TYPE) {
    %doc.%RESOURCE_TYPE.resourceProperties exists
}
